[{"categories":["Programmierung"],"content":"‚ö†Ô∏è ‚ö†Ô∏è ‚ö†Ô∏è Dieser Beitrag dient nur zu Forschungszwecken und zur L√∂sungsfindung geeigneter Gegenma√ünahmen! ‚ö†Ô∏è Ô∏è‚ö†Ô∏è ‚ö†Ô∏è\nEinleitung Es gibt momentan, ausgel√∂st durch die Recherche 1 von Socket eine massive Welle an Blog-Beitr√§gen, Videos und Podcast √ºber den Fund von Malware in Paketen der Programmiersprache Go. Lasst uns zusammen einmal verstehen was hier genau passiert ist, dann erstellen wir ein proof of concept und kl√§ren anschlie√üend, ob alle Anschuldigungen stimmen und welche L√∂sungswege es gibt.\nWas ist passiert? Bis Stand heute sind in drei verschiedenen Go-Paketen verschleierte Malware gefunden worden.\nLeider wird hier nur davon gesprochen, dass der Scanner von Socket \u0026ldquo;verd√§chtiges Verhalten\u0026rdquo; bei diesen Paketen geflagged hat und es deswegen genauer untersucht wurde. Ich nehme mal an die scrapen auf eine Art und Weise \u0026ldquo;alle\u0026rdquo; √∂ffentlichen Go-Pakete, letztendlich wollen die ja ihr Produkt verkaufen. Gerade bei solchen Eintr√§gen bin ich in den letzten Jahren vorsichtig bzw. skeptisch da hier oftmals medial versucht wird etwas aufzubauschen, um eine bessere Vermarktung des Produkts zu erreichen. Aus diesem Grund versuche ich die Beitr√§ge selber gegenzupr√ºfen. Ich nehme gleich vorweg, dass das hier nicht der Fall ist, sondern dass es sich um ein ernsthaftes Problem handelt, das auf jeden Fall Aufmerksamkeit verdient. Es gibt auch keine Zahlen dar√ºber, wie viele Downloads diese Pakete hatten und welchen Schaden sie nun wirklich angerichtet haben.\nAls zentrales Problem wird das dezentrale √ñkosystem von Go angef√ºhrt, welches Pakete nur direkt aus ihrer Quelle (Git-Repo) installiert. Das hat zur Folge, dass der Name eines Pakets indirekt mehrfach vergeben werden kann. Zum Beispiel, kann es das Repository user1/paket und user2/paket geben. Es wird vielleicht klarer, wenn wir hier nicht-abstrakte Namen ins Spiel bringen wie z.B. reinventorofwheel/jwt-authentication und reinventorofwhel/jwt-authentication. Beides w√§ren valide Pakete und k√∂nnten installiert werden. Jetzt k√∂nnte das \u0026ldquo;falsche\u0026rdquo; Paket sogar ein Clone von dem \u0026ldquo;richtigen\u0026rdquo; Paket sein, indem nur die verschleierte Malware hinzugef√ºgt wird. Durch den Typo und durch den Clone w√ºrde einem sehr wahrscheinlich nicht auffallen, dass man hier ein falsches Paket hinzugef√ºgt hat. Nat√ºrlich gibt es schon Hinweise daf√ºr und man sollte seine Abh√§ngigkeiten sowieso immer gr√ºndlich kontrollieren, nicht wahr?\nDer Vollst√§ndigkeit halber, die dort analysierte Malware f√ºhrt ein wget (Download) aus der ein Script herunterl√§dt, dass automatisch ausgef√ºhrt wird und dann die gesamte /dev/sda Partition √ºberschreibt (wenn root Zugriff üòâ).\nDer Beitrag beinhaltet auch L√∂sungsans√§tze diese werden wir zu einem sp√§teren Zeitpunkt genauer anschauen.\nProof of concept Lasst uns step by step eine eigene malware programmieren (die nat√ºrlich nichts B√∂ses macht!).\nInitialisieren eines Go Paketes:\n//go.mod module golang_malware_research go 1.24.3 Wir gehen jetzt einfach mal davon aus, dass die ein kopiertes Paket ist. Dies beinhaltet die super tolle Logik die jemand anderes unbedingt ben√∂tigt.\n//logic.go package golang_malware_research import ( \u0026#34;fmt\u0026#34; ) type Whatever struct { } func NewWhatever() *Whatever { return \u0026amp;Whatever{} } func (W *Whatever) SayHello() { fmt.Println(\u0026#34;WORLD!\u0026#34;) } Und nun erstellen wir unser schadhaften Part der einfachheitshalber in einem extra Pfad:\n// malware/malware.go package malware import \u0026#34;fmt\u0026#34; func simplePrintln() error { fmt.Println(\u0026#34;HELLO\u0026#34;) return nil } var simple = simplePrintln() Dies k√∂nnte nun auch ein externes Paket sein, wenn wir in go.mod z.B. unseren Github-Pfad/Repository eintragen w√ºrden. Damit w√§re das Paket, wenn auf √∂ffentlich gestellt f√ºr jeden zug√§nglich. Wir machen es uns nat√ºrlich wie immer einfach und f√ºgen ein command im selben Projekt hinzu, der dann die Logik aufruft.\n// cmd/main.go package main import \u0026#34;golang_malware_research\u0026#34; func main() { whatever := golang_malware_research.NewWhatever() whatever.SayHello() } Wenn ich das Programm nun baue und dann ausf√ºhre, bekomme ich folgende Ausgabe:\nWORLD! Nun, das hat ja schonmal nicht so ganz geklappt. Meine Faulheit hat dazu gef√ºhrt das ein wichtiges Detail fehlt. Zum einen, kann der malware Code, zu jedem package hinzugef√ºgt werden, solange der Pfad dahin nicht importiert wird, wird auch nichts beim Bauen beachtet, bzw. eben auch der malware code nicht ausgef√ºhrt. Wir importieren nun einfach das malware Paket in dem logic code, ohne dort etwas davon zu nutzen:\n// logic.go package golang_malware_research import ( \u0026#34;fmt\u0026#34; _ \u0026#34;golang_malware_research/malware\u0026#34; \u0026lt;----- NEU ) type Whatever struct { } func NewWhatever() *Whatever { return \u0026amp;Whatever{} } func (W *Whatever) SayHello() { fmt.Println(\u0026#34;WORLD!\u0026#34;) } Folgende Ausgabe nach einem erneuten build:\nHELLO WORLD! UPSI!\nDas Ganze w√§re nat√ºrlich unauff√§lliger, wenn es einfach zwischen realem Code versteckt w√§re. Interessanterweise, wird bei einem Import das package ausgef√ºhrt und var simple = simplePrintln() sorgt daf√ºr, dass die Funktion aufgerufen wird. Hier wird klar, welche Reichweite sowas h√§tte wobei man ja schon hat sagen muss. Nachdem wir das nun in einer sehr kleinen Scope nachstellen konnten, ist denke ich auch die Aussage in der Einleitung klar, hier gibt es ein dickes Problem.\nWelche Anschuldigungen stimmen denn nun? Ich habe ein paar Videos als auch Blog-Beitr√§ge gelesen und bin doch erstaunt gewesen welche Aussagen da im Raum standen. Ehrlicherweise war ich mir bei einigen Thesen selber nicht 100%ig sicher, weswegen es mich umso mehr interessiert hat, was nun tats√§chlich stimmt.\nGo f√ºhrt den Quellcode automatisch beim Installieren des Paketes aus (go get) Hier war ich wohl am meisten irritiert, mein Gef√ºhl sagte mir, dass das nicht stimmt. Doch f√ºhlte ich mich leicht verunsichert, weil ich das in unterschiedlichen Formaten gesehen und geh√∂rt hatte. √úbrigens im Socket-Block steht davon √ºberhaupt nichts, generell finde ich den Blog sehr fair und gradlinig! Nun habe ich zus√§tzlich zu dem fmt.Println(HELLO) noch os-commands als auch shell execs wie im \u0026ldquo;Original\u0026rdquo; eingebaut, denn es h√§tte schon sein k√∂nnen, dass beim go get command stdout unterdr√ºckt wird. Trotzdem kann ich von meinen Tests her Entwarnung geben, das lie√ü sich nicht best√§tigen! Go f√ºhrt den Quellcode automatisch beim Bauen aus Ich denke, wir kennen hier die Antwort. Nichtsdestotrotz habe ich das nat√ºrlich auch ausprobiert und es hat sich durch meine Tests nicht best√§tigen lassen. Diese These war f√ºr mich pers√∂nlich garnicht so abwegig, denn zum Beispiel in Rust, gibt es ja auch build.rs welches zum Build ausgef√ºhrt wird. Die Malware wird ausgef√ºhrt, wenn man das Programm startet Klingt irgendwie nach keiner These, denn das sollte ja der Zweck der Malware sein. Prinzipiell gibt es nat√ºrlich noch die M√∂glichkeit von Backdoor o.√Ñ. die durch ein bestimmten Command dem Webserver oder was auch immer das Paket macht √ºbergeben werden kann. Bezug nehmend auf die analysierten Pakete stimmt das ganze hier auch nur halb. Wir haben ja gesehen, dass zumindest der Import irgendwo gesetzt sein muss. Wenn es nun zwischen \u0026ldquo;echten\u0026rdquo; Code versteckt worden w√§re, w√§re das auch der Fall. Ich finde trotzdem, dass das eine korrekte Aussage ist. Hier gibt es aber noch einige versteckte Zusammenh√§nge, die ich aufl√∂sen m√∂chte. Wenn von installieren gesprochen wird, kann auch go install gemeint sein, welches im Falle des tlsproxy auch wahrscheinlich ist. Dies scheint dazu gef√ºhrt zu haben, dass es so aufgefasst wurde, als wenn dies als Abh√§ngigkeit passiert. Ich denke, dass dieser Umstand zu Verwirrung gef√ºhrt haben k√∂nnte und man es deswegen gr√∂√üer macht als es in dem Fall ist. Denn auch go install f√ºhrt die Applikation nicht direkt aus, sondern macht zus√§tzlich zu go build noch, dass das Binary danach in das $GOPATH/bin Verzeichnis gelegt wird (Oder $GOBIN, wenn deklariert).\nLeider gab es noch ein paar andere Aussagen die aber offensichtlich Ragebait, Clickbait und oder Triggern sollten. Ich denke, das Problem ist real genug, dass man hier ernsthaft dr√ºber nachdenken und eine L√∂sung finden sollte. Aber das Internet ist nun mal das Internet und wir ignorieren das an dieser Stelle einfach mal.\nL√∂sungsvorschl√§ge aus dem Internetz Auch hier m√∂chte ich auf einige externe Vorschl√§ge eingehen und meinen Senf dazu geben.\nGo braucht eine zentrale Platform die als Package Registry funktioniert Dieser Vorschlag wird am lautesten von allen Seiten verbreitet, in dem Socket-Blog wird dies aber lediglich als Grund f√ºr die Verbreitung durch Verwirrung angegeben. Ich muss hier zugeben, dass dies wirklich der einzige Vorteil einer zentralen Platform ist, allerdings hilft dieser nur in diesem speziellen Fall und deswegen hier die Frage ob der Trade-Off das wert w√§re. Leider wird an den Meisten stellen von Security Scans usw. gesprochen. Das haben die aufgef√ºhrten Beispiele wie pypi und npmjs meines Wissens nach aber auch nicht! Google sollte irgendwas‚Ñ¢ tun, um dieses Verhalten zu verhindern Leider habe ich dies immer im Zusammenhang mit go install wahr genommen. Hier wird immer davon ausgegangen, dass der Quellcode sofort danach automatisch ausgef√ºhrt, was nicht stimmt, wie wir hier ja getestet haben. Dennoch sehe ich hier auch eine gewisse Verantwortungspflicht bei Google oder dem Golang-Team. Nicht aus dem Grund um hier mit dem Finger auf jemanden zu zeigen, sondern weil ich glaube, dass dort deutlich kompetentere Menschen sitzen, die bessere L√∂sungen erarbeiten k√∂nnten. Mehr Code Audits, Analysen und Monitoring Ich musste wirklich lange suchen, um wenigstens noch einen Punkt hier rein zu bekommen, den ich auch vollumf√§nglich unterst√ºtzen kann. Dieses steht auch so im Socket-Blog und ich empfinde das als einen guten Teil wie man solche Probleme in den Griff bekommen kann. Meine 42 Cent Zun√§chst bin ich erstmal erleichtert, dass sich die teilweise echt schweren Anschuldigungen nicht bewahrheitet haben. Allerdings bin ich doch auch erstaunt, wie einfach es ist Code einfach so in einem Package via Import auszuf√ºhren!\nIch nehme das Problem sehr ernst und mache mir auch Gedanken was man dagegen tun kann.\nBewusstsein Grunds√§tzlich bin ich daf√ºr, dass nicht jeder ein jwt-authentication Paket selber entwickeln sollte, sondern es f√ºr solche kritischen Pakete es stables in den jeweiligen Programmiersprachen geben sollte. (Und in vielen ja auch gibt). Allerdings sollte man schon ein Bewusstsein daf√ºr entwickeln was nun wirklich sinnvoll ist und was nicht und vielleicht einige Sachen mehr selber programmieren. Die Geschichte h√∂rt hier bei Frameworks auf, weil dort niemand die 1600 peer-dependencies pr√ºft was definitiv ein echtes Problem ist. Sandbox / dedizierte Umgebung In dem konkreten Fall ging es um ausf√ºhrbare Software, dennoch halte ich es f√ºr sinnvoll sowohl Entwicklung als auch Benutzung von Software zu isolieren (soweit es eben geht). Das kann sowohl durch virtuelle Maschinen erfolgen als auch durch Containerisierung. Programmiersprachen √ºbergreifendes Problem Das Einbinden und installieren von Software via Github o.√Ñ. ist kein Go-spezifisches Problem. Ich denke das hier eine generelle L√∂sung f√ºr alle Sprachen und √ñkosysteme gefunden werden muss. Software aus dem Internet Ich werde euch nichts Neues erz√§hlen und doch tun wir dies alle. Installiert keine Software aus dem Internet! Letztendlich basiert alles auf Vertrauen, aber es gibt nat√ºrlich Quellen, denen man mehr vertraut und anderen weniger. Hier sollte man genauer hinschauen und im Zweifelsfall erstmal eine Sandbox nutzen. Public Money Damit mehr Code Audits usw. erfolgen k√∂nnen sollten auch Staaten ihren Teil hierzu beitragen und Personal, Ressourcen und Geld zur Verf√ºgung stellen. Software geht uns alle etwas an und der Support gerade im Open Source Bereich l√§sst zu w√ºnschen √ºbrig. Hier w√ºnsche ich mir auch ein Umdenken in der Gesellschaft! Einfach mal das Rad neu erfinden! Da ist nichts weiter zuzusagen! Ich hoffe, Euch hat der Beitrag gefallen und etwas Licht ins Dunkle gebracht. Ver√§nderung f√§ngt bei einem selbst an!\nReinventoOfWheel\nSocket Blog-Beitrag \u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://blog.reinventorofwheel.de/posts/golang-malicious-modules/","tags":["golang","security"],"title":"Golang's b√∂sartige Module"},{"categories":["CCC"],"content":"Vorwort Hier ein kurzes Recap von meinem Aufenthalt auf dem 38C3. Ich habe ja im Livestream schon im Detail dar√ºber gesprochen, deswegen komme ich hier ausnahmsweise mal direkt auf den Punkt.\nEindr√ºcke Grunds√§tzlich kann ich sagen, dass ich mich richtig auf den Kongress gefreut habe. Ich verbinde das mit unterschiedlichen anderen positiven Dingen in meinem Leben. Egal ob nun LAN-Partys, als Jungendlicher am PC herumbasteln, Programmieren damit irgendwas blinkt, Upsis im Internet und noch vieles mehr, all das kommt hier zusammen. Die Kreaturen sind im Regelfall sehr aufgeschlossen und erz√§hlen einem Stolz etwas √ºber ihr Projekt. Man entdeckt jeden Tag etwas Neues, kein Rundgang ist wie der andere.\nGefreut habe ich mich auch Leute aus der \u0026ldquo;Community\u0026rdquo; zu treffen und auch mal ein Gesicht zu dem Nickname abspeichern zu k√∂nnen. Von meiner sympathischen Begleitung ganz zu schweigen ;)\nZus√§tzlich dazu, als wenn das nicht schon genug w√§re, gibt es von Morgens bis sp√§tnachts Talks auf einem Niveau welches man auf kommerziellen Konferenzen und Events leider sehr, sehr selten sieht.\nTalk-Empfehlung Die Reihenfolge ist kein Ranking, sondern lediglich durch die zum Zeitpunkt des Schreibens gegebene Reihenfolge der CCC Mediathek .\nWenn ihr Talks hier nicht wieder findet bedeutet das nicht, dass diese nicht gut oder gar schlecht gewesen sind. Die Qualit√§t ist so extrem hoch, dass ich irgendwo einen Cut machen musste und trotzdem sind es 15 must-see Talks geworden. Auch kann es vorkommen, dass ich Talks nicht gesehen habe und auch nicht sehen m√∂chte, weil Themen mich nicht ansprechen o.√Ñ.\nIch habe einen riesen Respekt vor allen Kreaturen die sich auf die B√ºhne gestellt haben und einen Talk gehalten haben. Dementsprechend wird es hier keine negativen Aussagen geben.\nDen Award f√ºr den besten Undercover Talk gewinnt dieses Jahr die Nummer 8 auf meiner Liste Was macht ein IT-Systemadministrator in einem Alu-Schmelzwerk (Schafft die Deutsche Industrie die Digitalisierung) Ich bin hier komplett ohne Erwartungshaltung rein und der Johannes hat komplett abgerissen. Saal ZigZag war bis unters Dach voll und ich glaube er selber hat damit auch nicht gerechnet. Bisschen schade war, dass alle sofort nach Ende den Raum verlassen haben, weil der Volkswagen Talk in Saal 1 im Anschluss angek√ºndigt war.\nWir wissen wo dein Auto steht - VW Der Th√ºring-Test f√ºr Wahlsoftware Liberating Wi-Fi on the ESP32 BioTerrorism Will Save Your Life with the 4 Thieves Vinegar Collective Hacking yourself a satellite - recovering BEESAT-1 Kn√§ste hacken Fake-Shops von der Stange: BogusBazaar Was macht ein IT-Systemadministrator in einem Alu-Schmelzwerk (Schafft die Deutsche Industrie die Digitalisierung) Was lange w√§hrt, wird endlich gut? Die Modernisierung des Computerstrafrechts What the PHUZZ?! Finding 0-days in Web Applications with Coverage-guided Fuzzing ‚ÄûKonnte bisher noch nie gehackt werden‚Äú: Die elektronische Patientenakte kommt - jetzt f√ºr alle! Databroker Files: Wie uns Apps und Datenh√§ndler der Massen√ºberwachung ausliefern Euclid, das Weltraumteleskop - 180 Millionen Galaxien sind ein guter Anfang Projekt Bucketchallenge Dialing into the Past: RCE via the Fax Machine ‚Äì Because Why Not? \u0026mdash; Neu hinzugekommen \u0026mdash; Fnord-Nachrichtenr√ºckblick 2024 Retro-Chips selbst gemacht: Historische Hardware in FPGAs nachbilden Mal was mit Holz Abschlie√üende Worte Alles in allem ging der 38C3 mit einem lachenden und weinenden Auge f√ºr mich zuende. Es waren wundervolle 4 Tage und ich bin ein bisschen traurig, dass es dann doch schon zuende ging. Ich hoffe, dass ich n√§chstes Jahr, sollte es einen 39C3 in Hamburg geben, wieder dabei sein kann.\n","permalink":"https://blog.reinventorofwheel.de/posts/38c3-recap/","tags":["38C3","CCC","Konferenz","Kongress","Chaos"],"title":"38C3 Recap"},{"categories":null,"content":"Einleitung Hallo! Sch√∂n, dass du es auf meinen Blog geschafft hast!\nHier wird es in unregelm√§√üigen Abst√§nden Posts zu technischen Themen geben.\nArt und Umfang Die Posts kommen aus meinem beruflichen Alltag, der Arbeit an Nebenprojekten, meinem Home-Server/Smart-Home, aus dem Maker Bereich und was mir sonst noch so einf√§llt. Der Umfang der Posts wird variieren. Mal ist es nur eine technische Nuance, mal ein sehr ausgearbeiteter Post zu einem gro√üen Thema. Dadurch entstehen auch die unregelm√§√üigen Abst√§nde.\nMotivation Regelm√§√üig sto√üe ich auf Probleme, zu denen ich selbst keine L√∂sung kenne. Viele dieser Probleme sind von gro√üer Komplexit√§t und lassen sich nicht durch eine einzelne Suche in einer Suchmaschine l√∂sen. Die Recherchen sind aufw√§ndig und f√ºhren dazu, dass man von einem Problem zum n√§chsten rennt, welches dann auch wieder eine L√∂sung ben√∂tigt. Gerade bei Themen, in denen man sich wenig auskennt oder bei denen man meint, sich gut auszukennen, aber dann auf einen Spezialfall st√∂√üt, ist es extrem schwierig, passende L√∂sungen zu finden. Die Rahmenbedingungen passen in L√∂sungsvorschl√§gen dann doch nicht zu den eigenen oder wie man auch so sch√∂n sagt, liegt der Teufel dann im Detail.\nBei Themen, zu denen nur wenige L√∂sungsans√§tze oder Dokumentationen auffindbar sind, stellt sich die Frage, ob das eigene Problem singul√§r ist. Es stellt sich die Frage, ob es bereits √§hnliche Herausforderungen gab, die gel√∂st wurden und deren Dokumentation mir weiterhelfen k√∂nnte.\nZudem ist uns allen das Gef√ºhl vertraut, ein Tool gefunden zu haben, auf das die Welt gewartet hat, oder diese eine Konfigurationszeile, die das Leben ver√§ndert.\nDes Weiteren ist es eine vertraute Erfahrung, ein Tool gefunden zu haben, das als revolution√§r wahrgenommen wird, oder eine Konfigurationszeile zu entdecken, die eine signifikante Ver√§nderung mit sich bringt.\nBei Themen, zu denen nur wenige L√∂sungsans√§tze oder Dokumentationen auffindbar sind, stellt sich die Frage, ob das eigene Problem singul√§r ist. Es ist zu pr√ºfen, ob es bereits √§hnliche Herausforderungen gab, die gel√∂st wurden und deren Dokumentation weiterhelfen k√∂nnte.\nZudem ist uns allen das Gef√ºhl vertraut, ein Tool gefunden zu haben, auf das die Welt gewartet hat, oder diese eine Konfigurationszeile, die das Leben ver√§ndert.\nEin Teil dieser Erfahrungen m√∂chte ich gerne mit euch teilen.\nThomas\n","permalink":"https://blog.reinventorofwheel.de/about/","tags":["first","willkommen"],"title":"Willkommen auf meinem Blog!"},{"categories":null,"content":"","permalink":"https://blog.reinventorofwheel.de/search/_index.en/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://blog.reinventorofwheel.de/search/_index.es/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://blog.reinventorofwheel.de/search/_index.fr/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://blog.reinventorofwheel.de/search/_index.hi/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://blog.reinventorofwheel.de/search/_index.jp/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://blog.reinventorofwheel.de/search/_index.pl/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://blog.reinventorofwheel.de/search/_index.ru/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://blog.reinventorofwheel.de/search/_index.zh-cn/","tags":null,"title":""}]